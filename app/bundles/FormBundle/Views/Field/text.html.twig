{#
  Varables
    - field
    - formName (optional, string)
    - fieldPage
    - contactFields
    - companyFields
    - inBuilder
    - fields
    - inForm (optional, bool)
    - required (optional, bool)
#}
{#
$containerType     = (isset($type)) ? $type : 'text';
$defaultInputClass = (isset($inputClass)) ? $inputClass : 'input';
#}
{% set containerType = type|default('text') %}
{% set defaultInputClass = inputClass|default('input') %}

{# start: field_helper #}
{#
$appendAttribute = function (&$attributes, $attributeName, $append) {
    if (false === stripos($attributes, "{$attributeName}=")) {
        $attributes .= ' '.$attributeName.'="'.$append.'"';
    } else {
        $attributes = str_ireplace($attributeName.'="', $attributeName.'="'.$append.' ', $attributes);
    }
};
#}

{#
if (!isset($defaultInputFormClass)) {
    $defaultInputFormClass = '';
}

if (!isset($defaultLabelClass)) {
    $defaultLabelClass = 'label';
}

if (!isset($formName)) {
    $formName = '';
}

if (!isset($containerClass)) {
    $containerClass = $containerType;
}

$order                 = (isset($field['order'])) ? $field['order'] : 0;
$validationMessage = '';

$properties = $field['properties'];

$defaultInputClass = 'mauticform-'.$defaultInputClass;
$defaultLabelClass = 'mauticform-'.$defaultLabelClass;
#}
{% set defaultInputFormClass = defaultInputFormClass|default('') %}
{% set defaultLabelClass = defaultLabelClass|default('label') %}
{% set formName = formName|default('') %}
{% set defaultInputClass = 'mauticform-' ~ defaultInputClass %}
{% set defaultLabelClass = 'mauticform-' ~ defaultLabelClass %}
{% set containerClass = containerClass|default(containerType) %}
{% set order = field.order|default(0) %}
{% set validationMessage = '' %}

{% set inputAttributes = htmlAttributesStringToArray(field.inputAttributes|default('')) %}
{% set labelAttributes = htmlAttributesStringToArray(field.labelAttributes|default('')) %}
{% set containerAttributes = htmlAttributesStringToArray(field.containerAttributes|default('')) %}

{#% set properties = field.properties %#}

{#
$name = '';
if (empty($ignoreName)) {
    $inputName = 'mauticform['.$field['alias'].']';
    if (!empty($properties['multiple'])) {
        $inputName .= '[]';
    }
    $name = ' name="'.$inputName.'"';
}

if (in_array($field['type'], ['checkboxgrp', 'radiogrp', 'textarea'])) {
    $value = '';
} else {
    $value = (isset($field['defaultValue'])) ? ' value="'.$field['defaultValue'].'"' : ' value=""';
}

if (empty($ignoreId)) {
    $inputId = 'id="mauticform_input'.$formName.'_'.$field['alias'].'"';
    $labelId = 'id="mauticform_label'.$formName.'_'.$field['alias'].'" for="mauticform_input'.$formName.'_'.$field['alias'].'"';
} else {
    $inputId = $labelId = '';
}

$inputAttr = $inputId.$name.$value;
$labelAttr = $labelId;

if (!empty($properties['placeholder'])) {
    $inputAttr .= ' placeholder="'.$properties['placeholder'].'"';
}
#}
{% if ignoreName is not defined or (ignoreName is defined and ignoreName is empty) %}
  {% set inputName = 'mauticform[' ~ field.alias ~ ']' %}
  {% if field.properties.multiple is defined %}
    {% set inputName = inputName ~ '[]' %}
  {% endif %}
  {% set inputAttributes = inputAttributes|merge({
          'name': inputName,
  }) %}
{% endif %}

{% if field.type not in ['checkboxgrp', 'radiogrp', 'textarea'] %}
  {% set inputAttributes = inputAttributes|merge({
          'value': field.defaultValue|default(''),
  }) %}
{% endif %}

{% if ignoreId is not defined or (ignoreId is defined and ignoreId is empty) %}
  {% set inputAttributes = inputAttributes|merge({
          'id': 'mauticform_input' ~ formName ~ '_' ~ field.alias,
  }) %}
  {% set labelAttributes = labelAttributes|merge({
          'id': 'mauticform_label' ~ formName ~ '_' ~ field.alias,
          'for': 'mauticform_input' ~ formName ~ '_' ~ field.alias,
  }) %}
{% endif %}

{% if field.properties.placeholder is defined and field.properties.placeholder is not empty %}
  {% set inputAttributes = inputAttributes|merge({
          'placeholder': field.properties.placeholder,
  }) %}
{% endif %}


{# Label and input #}
{#
if (!empty($inForm)) {
    if (in_array($field['type'], ['button', 'pagebreak'])) {
        $defaultInputFormClass .= ' btn btn-default';
    }
    $labelAttr .= ' class="'.$defaultLabelClass.'"';
    $inputAttr .= ' disabled="disabled" class="'.$defaultInputClass.$defaultInputFormClass.'"';
} else {
    if ($field['labelAttributes']) {
        $labelAttr .= ' '.htmlspecialchars_decode($field['labelAttributes']);
    }

    $appendAttribute($labelAttr, 'class', $defaultLabelClass);

    if ($field['inputAttributes']) {
        $inputAttr .= ' '.htmlspecialchars_decode($field['inputAttributes']);
    }

    $appendAttribute($inputAttr, 'class', $defaultInputClass);
}
#}
{% if inForm is defined and (true == inForm or inForm is not empty) %}
  {% if field.type in ['button', 'pagebreak'] %}
    {% set defaultInputFormClass = defaultInputFormClass ~ ' btn btn-default' %}
  {% endif %}

  {% set labelAttributes = labelAttributes|merge({
          'class': labelAttributes.class|default([])|merge([defaultLabelClass]),
  }) %}
  {% set inputAttributes = inputAttributes|merge({
          'disabled': 'disabled',
          'class': inputAttributes.class|default([])|merge([defaultInputClass, defaultInputFormClass]),
  }) %}
{% else %}
  {% set labelAttributes = labelAttributes|merge({
          'class': labelAttributes.class|default([])|merge([defaultLabelClass]),
  }) %}
  {% set inputAttributes = inputAttributes|merge({
          'class': inputAttributes.class|default([])|merge([defaultInputClass]),
  }) %}
{% endif %}

{# Container #}
{#
$containerAttr = 'id="mauticform'.$formName.'_'.$id.'" '.htmlspecialchars_decode($field['containerAttributes']);
$defaultContainerClass = 'mauticform-row mauticform-'.$containerClass.' mauticform-field-'.$order;
if ($field['parent'] && isset($fields[$field['parent']])) {
    $values = implode('|', $field['conditions']['values']);

    if (!empty($field['conditions']['any']) && 'notIn' != $field['conditions']['expr']) {
        $values = '*';
    }

    $containerAttr .= " data-mautic-form-show-on=\"{$fields[$field['parent']]->getAlias()}:".$values.'" data-mautic-form-expr="'.$field['conditions']['expr'].'"';

    $defaultContainerClass .= '  mauticform-field-hidden';
}
#}
{% set containerAttributes = containerAttributes|merge({
        'id': 'mauticform' ~ formName|default('') ~ '_' ~ id,
        'class': containerAttributes.class|default([])|merge([
          'mauticform-row',
          'mauticform-' ~ containerClass,
          'mauticform-field-' ~ order,
        ]),
}) %}
{% if field.parent and fields[field.parent] is defined %}
  {% set values = field.conditions.values|join('|') %}

  {% if field.conditions.any is not empty and 'notIn' != field.conditions.expr %}
    {% set values = '*' %}
  {% endif %}

  {% set containerAttributes = containerAttributes|merge({
          'data-mautic-form-show-on': fields[field.parent].alias ~ ':' ~ values,
          'data-mautic-form-expr': field.conditions.expr,
          'class': containerAttributes.class|merge([
            'mauticform-field-hidden',
          ]),
  }) %}
{% endif %}


{# Field is required #}
{#
if (isset($field['isRequired']) && $field['isRequired']) {
    $required = true;
    $defaultContainerClass .= ' mauticform-required';
    $validationMessage = $field['validationMessage'];
    if (empty($validationMessage)) {
        $validationMessage = $view['translator']->trans('mautic.form.field.generic.required', [], 'validators');
    }

    $containerAttr .= " data-validate=\"{$field['alias']}\" data-validation-type=\"{$field['type']}\"";

    if (!empty($properties['multiple'])) {
        $containerAttr .= ' data-validate-multiple="true"';
    }
} elseif (!empty($required)) {
    // Forced to be required
    $defaultContainerClass .= ' mauticform-required';
}

$appendAttribute($containerAttr, 'class', $defaultContainerClass);
#}
{% if field.isRequired is defined and field.isRequired %}
  {% set required = true %}
  {% set validationMessage = field.validationMessage %}
  {% if validationMessage is empty %}
        {% set validationMessage = 'mautic.form.field.generic.required'|trans([], 'validators') %}
  {% endif %}
  {% set containerAttributes = containerAttributes|merge({
          'class': containerAttributes.class|default([])|merge([
            'mauticform-required',
          ]),
          'data-validate': field.alias,
          'data-validation-type': field.type,
  }) %}
  {% if field.properties.multiple is defined and field.properties.multiple is not empty %}
    {% set containerAttributes = containerAttributes|merge({
            'data-validate-multiple': 'true',
    }) %}
  {% endif %}
{% elseif required is defined and true == required %}
  {# Forced to be required #}
  {% set containerAttributes = containerAttributes|merge({
          'class': containerAttributes.class|default([])|merge([
            'mauticform-required',
          ]),
  }) %}
{% endif %}

{# Setup list parsing #}
{#
if (isset($list) || isset($properties['syncList']) || isset($properties['list']) || isset($properties['optionlist'])) {
    $parseList     = [];
    $isBooleanList = false;

    if (!isset($contactFields)) {
        $contactFields = [];
    }
    if (!isset($companyFields)) {
        $companyFields = [];
    }
    $formFields = array_merge($contactFields, $companyFields);
    if (!empty($properties['syncList']) && !empty($field['leadField']) && isset($formFields[$field['leadField']])) {
        $leadFieldType = $formFields[$field['leadField']]['type'];
        switch (true) {
            case !empty($formFields[$field['leadField']]['properties']['list']):
                $parseList = $formFields[$field['leadField']]['properties']['list'];
                break;
            case 'boolean' == $leadFieldType:
                $parseList     = [
                    0 => $formFields[$field['leadField']]['properties']['no'],
                    1 => $formFields[$field['leadField']]['properties']['yes'],
                ];
                $isBooleanList = true;
                break;
            case 'country' == $leadFieldType:
                $list = \Mautic\LeadBundle\Helper\FormFieldHelper::getCountryChoices();
                break;
            case 'region' == $leadFieldType:
                $list = \Mautic\LeadBundle\Helper\FormFieldHelper::getRegionChoices();
                break;
            case 'timezone' == $leadFieldType:
                $list = \Mautic\LeadBundle\Helper\FormFieldHelper::getTimezonesChoices();
                break;
            case 'locale':
                $list = \Mautic\LeadBundle\Helper\FormFieldHelper::getLocaleChoices();
                break;
        }
    }

    if (empty($parseList)) {
        if (isset($list)) {
            $parseList = $list;
        } elseif (!empty($properties['optionlist'])) {
            $parseList = $properties['optionlist'];
        } elseif (!empty($properties['list'])) {
            $parseList = $properties['list'];
        }

        if (isset($parseList['list'])) {
            $parseList = $parseList['list'];
        }
    }

    if ($field['leadField'] && !empty($formFields[$field['leadField']]['type'])
        && in_array(
            $formFields[$field['leadField']]['type'],
            ['datetime', 'date']
        )) {
        $tempLeadFieldType = $formFields[$field['leadField']]['type'];
        foreach ($parseList as $key => $aTemp) {
            if ($date = ('datetime' == $tempLeadFieldType ? $view['date']->toFull($aTemp['label']) : $view['date']->toDate($aTemp['label']))) {
                $parseList[$key]['label'] = $date;
            }
        }
    }

    $list = $isBooleanList
        ?
        \Mautic\FormBundle\Helper\FormFieldHelper::parseBooleanList($parseList)
        :
        \Mautic\FormBundle\Helper\FormFieldHelper::parseList($parseList);

    $firstListValue = reset($list);
}
#}
{% if list is defined or field.properties.syncList is defined or field.properties.list is defined or field.properties.optionList is defined %}
  {% set parseList = [] %}
  {% set isBooleanList = false %}
  {% set contactFields = contactFields|default([]) %}
  {% set companyFields = companyFields|default([]) %}
  {% set formFields = contactFields|merge(companyFields) %}

  {% if
        field.properties.syncList is defined and field.properties.syncList is not empty and
        field.leadField is defined and field.leadField is not empty and
        formFields[field.leadField] is defined
  %}
    {% set leadFieldType = formFields[field.leadField].type %}
    {% if formFields[field.leadField].properties.list is not empty %}
      {% set parseList = formFields[field.leadField].properties.list %}
    {% elseif 'boolean' == leadFieldType %}
      {% set parseList = {
              '0': formFields[field.leadField].properties.no,
              '1': formFields[field.leadField].properties.yes,
      }%}
    {% elseif 'country' == leadFieldType %}
      {% set list = formFieldCountryChoices() %}
    {% elseif 'region' == leadFieldType %}
      {% set list = formFieldRegionChoices() %}
    {% elseif 'timezone' == leadFieldType %}
      {% set list = formFieldTimezonesChoices() %}
    {% elseif 'locale' == leadFieldType %}
      {% set list = formFieldLocaleChoices() %}
    {% endif %}
  {% endif %}

  {% if parseList is empty %}
    {% if list is defined %}
      {% set parseList = list %}
    {% elseif field.properties.optionlist is not empty %}
      {% set parseList = field.properties.optionlist %}
    {% elseif field.properties.list is not empty %}
      {% set parseList = field.properties.list %}
    {% endif %}

    {% if parseList.list is defined %}
      {% set parseList = parseList.list %}
    {% endif %}
  {% endif %}

  {% if field.leadField and formFields[field.leadField].type is not empty and formFields[field.leadField].type in ['datetime', 'date'] %}
    {% set tempLeadFieldType = formFields[field.leadField].type %}
    {% for key, aTemp in parseList %}
      {% set date = 'datetime' == tempLeadFieldType ? dateToFull(aTemp.label) : dateToDate(aTemp.label) %}
      {% if date %}
          {% set parseList = parseList|merge({
                  (key): parseList[key]|merge({
                          'label': date,
                  }),
          }) %}
      {% endif %}
    {% endfor %}
  {% endif %}

  {% if isBooleanList %}
    {% set list = formFieldParseBooleanList(parseList) %}
  {% else %}
    {% set list = formFieldParseList(parseList) %}
  {% endif %}

  {% set firstListValue = list|first %}
{% endif %}
{# end: field_helper #}

<div {% for attrName, attrValue in containerAttributes %}{{ attrName }}="{% if attrValue is iterable %}{{ attrValue|join(' ') }}{% else %}{{ attrValue }}{% endif %}"{% endfor %}>
  {% if field.showLabel %}<label {% for attrName, attrValue in labelAttributes %}{{ attrName }}="{% if attrValue is iterable %}{{ attrValue|join(' ') }}{% else %}{{ attrValue }}{% endif %}"{% endfor %}>{{ field.label }}</label>{% endif %}

  {% if field.helpMessage is not empty %}<span class="mauticform-helpmessage">{{ field.helpMessage }}</span>{% endif %}

  {% if 'textarea' == field.type %}
    <textarea {% for attrName, attrValue in inputAttributes %}{{ attrName }}="{% if attrValue is iterable %}{{ attrValue|join(' ') }}{% else %}{{ attrValue }}{% endif %}"{% endfor %}>{{ field.defaultValue }}</textarea>
  {% else %}
    <input type="{{ containerType }}" {% for attrName, attrValue in inputAttributes %}{{ attrName }}="{% if attrValue is iterable %}{{ attrValue|join(' ') }}{% else %}{{ attrValue }}{% endif %}"{% endfor %} />
  {% endif %}

  <span class="mauticform-errormsg" style="display:none;">{{ validationMessage }}</span>
</div>
