<?php

namespace Mautic\CoreBundle\Controller;

use Symfony\Component\Form\Form;
use Symfony\Component\DependencyInjection\ContainerInterface;
use Symfony\Component\HttpFoundation\Response;
use Symfony\Component\HttpFoundation\StreamedResponse;
use Exception;
use Symfony\Component\HttpFoundation\Request;
use Mautic\CoreBundle\Factory\MauticFactory;
use Mautic\UserBundle\Entity\User;
use Mautic\CoreBundle\Helper\CoreParametersHelper;
use Symfony\Component\EventDispatcher\EventDispatcherInterface;
use Symfony\Component\Translation\TranslatorInterface;
use Symfony\Component\HttpKernel\Event\FilterControllerEvent;
use DateTime;

interface NotificationController
{
    /**
     * 
     */
    public function getFormErrorMessage(array $formErrors);

    /**
     * 
     */
    public function getFormErrorMessages(Form $form);

    public function getFormErrorForBuilder(Form $form);

    /**
     * 
     */
    public function setContainer(ContainerInterface $container = null);

    /**
     * Support non-index pages such as modal forms.
     * 
     * 
     */
    public function generateUrl($route, $parameters, $referenceType);

    /**
     * Forwards the request to another controller.
     * 
     * 
     */
    public function forward($controller, array $path = array (
    ), array $query = array (
    ));

    /**
     * Returns a RedirectResponse to the given URL.
     * 
     * 
     */
    public function redirect($url, $status);

    /**
     * 
     */
    public function addFlash($message, $messageVars, $type, $domain, $addNotification);

    /**
     * Returns a rendered view.
     * 
     * 
     */
    public function renderView($view, array $parameters = array (
    ));

    /**
     * Renders a view.
     * 
     * 
     */
    public function render($view, array $parameters = array (
    ), Response $response = null);

    /**
     * Streams a view.
     * 
     * 
     */
    public function stream($view, array $parameters = array (
    ), StreamedResponse $response = null);

    /**
     * Returns a NotFoundHttpException.
     * 
     * This will result in a 404 response code. Usage example:
     * 
     *     throw $this->createNotFoundException('Page not found!');
     * 
     * 
     */
    public function createNotFoundException($message, Exception $previous = null);

    /**
     * Returns an AccessDeniedException.
     * 
     * This will result in a 403 response code. Usage example:
     * 
     *     throw $this->createAccessDeniedException('Unable to access this page!');
     * 
     * 
     */
    public function createAccessDeniedException($message, Exception $previous = null);

    /**
     * Creates and returns a Form instance from the type of the form.
     * 
     * 
     */
    public function createForm($type, $data, array $options = array (
    ));

    /**
     * Creates and returns a form builder instance.
     * 
     * 
     */
    public function createFormBuilder($data, array $options = array (
    ));

    /**
     * Shortcut to return the request service.
     * 
     * 
     *             Ask Symfony to inject the Request object into your controller
     *             method instead by type hinting it in the method's signature.
     */
    public function getRequest();

    /**
     * Shortcut to return the Doctrine Registry service.
     * 
     * 
     */
    public function getDoctrine();

    /**
     * Get a user from the Security Token Storage.
     * 
     * 
     * 
     */
    public function getUser();

    /**
     * Returns true if the service id is defined.
     * 
     * 
     */
    public function has($id);

    /**
     * Gets a container service by its id.
     * 
     * 
     */
    public function get($id);

    /**
     * 
     */
    public function setRequest(Request $request);

    /**
     * 
     */
    public function setFactory(MauticFactory $factory);

    /**
     * 
     */
    public function setUser(User $user);

    /**
     * 
     */
    public function setCoreParametersHelper(CoreParametersHelper $coreParametersHelper);

    /**
     * 
     */
    public function setDispatcher(EventDispatcherInterface $dispatcher);

    /**
     * 
     */
    public function setTranslator(TranslatorInterface $translator);

    /**
     * 
     */
    public function initialize(FilterControllerEvent $event);

    /**
     * Forwards the request to another controller and include the POST.
     * 
     * 
     */
    public function forwardWithPost($controller, array $request = array (
    ), array $path = array (
    ), array $query = array (
    ));

    /**
     * Determines if ajax content should be returned or direct content (page refresh).
     * 
     * 
     */
    public function delegateView($args);

    /**
     * Determines if a redirect response should be returned or a Json response directing the ajax call to force a page
     * refresh.
     * 
     * 
     */
    public function delegateRedirect($url);

    /**
     * Redirects URLs with trailing slashes in order to prevent 404s.
     * 
     * 
     */
    public function removeTrailingSlashAction(Request $request);

    /**
     * Redirects /s and /s/ to /s/dashboard.
     */
    public function redirectSecureRootAction();

    /**
     * Redirects controller if not ajax or retrieves html output for ajax request.
     * 
     * 
     */
    public function postActionRedirect($args);

    /**
     * Generates html for ajax request.
     * 
     * 
     */
    public function ajaxAction($args);

    /**
     * Get's the content of error page.
     * 
     * 
     */
    public function renderException(Exception $e);

    /**
     * Executes an action defined in route.
     * 
     * 
     */
    public function executeAction($objectAction, $objectId, $objectSubId, $objectModel);

    /**
     * Generates access denied message.
     * 
     * 
     * 
     */
    public function accessDenied($batch, $msg);

    /**
     * Generate 404 not found message.
     * 
     * 
     */
    public function notFound($msg);

    /**
     * Returns a json encoded access denied error for modal windows.
     * 
     * 
     */
    public function modalAccessDenied($msg);

    /**
     * 
     */
    public function addNotification($message, $type, $isRead, $header, $iconClass, DateTime $datetime = null);

    /**
     * 
     */
    public function addBrowserNotification($message, $messageVars, $domain, $title, $icon, $addNotification, $type);

    /**
     * 
     */
    public function exportResultsAs($toExport, $type, $filename);

    /**
     * 
     */
    public function unlockAction($id, $modelName);

    /**
     * 
     */
    public function indexAction($page);
}