diff --git a/app/bundles/CampaignBundle/Config/config.php b/app/bundles/CampaignBundle/Config/config.php
index e701db68..f61cdfa8 100644
--- a/app/bundles/CampaignBundle/Config/config.php
+++ b/app/bundles/CampaignBundle/Config/config.php
@@ -183,6 +183,9 @@ return [
                     'mautic.campaign.repository.lead',
                 ],
             ],
+            'mautic.campaign.generated_columns.subscriber' => [
+                'class'     => \Mautic\CampaignBundle\EventListener\GeneratedColumnSubscriber::class,
+            ],
         ],
         'forms'        => [
             'mautic.campaign.type.form'                 => [
diff --git a/app/bundles/CampaignBundle/Entity/LeadEventLog.php b/app/bundles/CampaignBundle/Entity/LeadEventLog.php
index 8ffa4456..717453ae 100644
--- a/app/bundles/CampaignBundle/Entity/LeadEventLog.php
+++ b/app/bundles/CampaignBundle/Entity/LeadEventLog.php
@@ -111,6 +111,7 @@ class LeadEventLog implements ChannelInterface
             ->addIndex(['campaign_id', 'event_id', 'date_triggered'], 'campaign_actions')
             ->addIndex(['campaign_id', 'date_triggered', 'event_id', 'non_action_path_taken'], 'campaign_stats')
             ->addIndex(['trigger_date'], 'campaign_trigger_date_order')
+            ->addIndex(['lead_id', 'is_scheduled', 'date_triggered'], 'campaign_trigger_date_order')
             ->addUniqueConstraint(['event_id', 'lead_id', 'rotation'], 'campaign_rotation');

         $builder->addBigIntIdField();
diff --git a/app/bundles/CampaignBundle/Entity/LeadEventLogRepository.php b/app/bundles/CampaignBundle/Entity/LeadEventLogRepository.php
index eea45e77..6061975f 100644
--- a/app/bundles/CampaignBundle/Entity/LeadEventLogRepository.php
+++ b/app/bundles/CampaignBundle/Entity/LeadEventLogRepository.php
@@ -83,14 +83,13 @@ class LeadEventLogRepository extends CommonRepository
                     '
                       )
                         ->from(MAUTIC_TABLE_PREFIX.'campaign_lead_event_log', 'll')
-                        ->join('ll', MAUTIC_TABLE_PREFIX.'campaign_events', 'e', 'll.event_id = e.id')
+                        ->join('ll', MAUTIC_TABLE_PREFIX.'campaign_events', 'e', 'll.event_id = e.id and e.event_type != :eventType')
                         ->join('ll', MAUTIC_TABLE_PREFIX.'campaigns', 'c', 'll.campaign_id = c.id')
                         ->leftJoin('ll', MAUTIC_TABLE_PREFIX.'campaign_lead_event_failed_log', 'fl', 'fl.log_id = ll.id')
-                        ->andWhere('e.event_type != :eventType')
                         ->setParameter('eventType', 'decision');

         if ($leadId) {
-            $query->where('ll.lead_id = '.(int) $leadId);
+            $query->andWhere('ll.lead_id = '.(int) $leadId);
         }

         if (isset($options['scheduledState'])) {
@@ -124,7 +123,17 @@ class LeadEventLogRepository extends CommonRepository
             );
         }

-        return $this->getTimelineResults($query, $options, 'e.name', 'll.date_triggered', ['metadata'], ['dateTriggered', 'triggerDate']);
+        $preferred_index = null;
+
+        if ($leadId && isset($options['scheduledState'])) {
+            if ($options['order']) {
+                $preferred_index = 'search_1';
+            } else {
+                $preferred_index = 'campaign_event_upcoming_search';
+            }
+        }
+
+        return $this->getTimelineResults($query, $options, 'e.name', 'll.date_triggered', ['metadata'], ['dateTriggered', 'triggerDate'], null, $preferred_index);
     }

     /**
diff --git a/app/bundles/CampaignBundle/EventListener/GeneratedColumnSubscriber.php b/app/bundles/CampaignBundle/EventListener/GeneratedColumnSubscriber.php
new file mode 100644
index 00000000..1a355463
--- /dev/null
+++ b/app/bundles/CampaignBundle/EventListener/GeneratedColumnSubscriber.php
@@ -0,0 +1,36 @@
+<?php
+
+declare(strict_types=1);
+
+namespace Mautic\CampaignBundle\EventListener;
+
+use Mautic\CoreBundle\CoreEvents;
+use Mautic\CoreBundle\Doctrine\GeneratedColumn\GeneratedColumn;
+use Mautic\CoreBundle\Event\GeneratedColumnsEvent;
+use Symfony\Component\EventDispatcher\EventSubscriberInterface;
+
+class GeneratedColumnSubscriber implements EventSubscriberInterface
+{
+    /**
+     * @return array<string,array<int|string>>
+     */
+    public static function getSubscribedEvents(): array
+    {
+        return [
+            CoreEvents::ON_GENERATED_COLUMNS_BUILD => ['onGeneratedColumnsBuild', 0],
+        ];
+    }
+
+    public function onGeneratedColumnsBuild(GeneratedColumnsEvent $event): void
+    {
+        $dateDiff = new GeneratedColumn(
+            'page_hits',
+            'generated_date_diff',
+            'INT(11)',
+            'timestampdiff(SECOND,`date_hit`,`date_left`)'
+        );
+
+        $event->addGeneratedColumn($dateDiff);
+    }
+
+}
diff --git a/app/bundles/CoreBundle/Helper/Chart/ChartQuery.php b/app/bundles/CoreBundle/Helper/Chart/ChartQuery.php
index a73ed2b3..7d17d71b 100644
--- a/app/bundles/CoreBundle/Helper/Chart/ChartQuery.php
+++ b/app/bundles/CoreBundle/Helper/Chart/ChartQuery.php
@@ -537,8 +537,7 @@ class ChartQuery extends AbstractChart
     public function modifyCountDateDiffQuery(QueryBuilder &$query, $dateColumn1, $dateColumn2, $startSecond = 0, $endSecond = 60, $tablePrefix = 't')
     {
         $query->select('COUNT('.$tablePrefix.'.'.$dateColumn1.') AS count');
-        $query->where('TIMESTAMPDIFF(SECOND, '.$tablePrefix.'.'.$dateColumn1.', '.$tablePrefix.'.'.$dateColumn2.') >= :startSecond');
-        $query->andWhere('TIMESTAMPDIFF(SECOND, '.$tablePrefix.'.'.$dateColumn1.', '.$tablePrefix.'.'.$dateColumn2.') < :endSecond');
+        $query->where($tablePrefix.'.generated_date_diff BETWEEN :endSecond AND :startSecond');

         $query->setParameter('startSecond', $startSecond);
         $query->setParameter('endSecond', $endSecond);
diff --git a/app/bundles/LeadBundle/Entity/LeadEventLog.php b/app/bundles/LeadBundle/Entity/LeadEventLog.php
index 26219ea7..eae9970a 100644
--- a/app/bundles/LeadBundle/Entity/LeadEventLog.php
+++ b/app/bundles/LeadBundle/Entity/LeadEventLog.php
@@ -93,7 +93,10 @@ class LeadEventLog
             ->addNullableField('action', Type::STRING)
             ->addNullableField('objectId', Type::INTEGER, 'object_id')
             ->addNamedField('dateAdded', Type::DATETIME, 'date_added')
-            ->addNullableField('properties', Type::JSON_ARRAY);
+            ->addNullableField('properties', Type::JSON_ARRAY)
+            ->addIndex(['lead_id', 'bundle', 'object', 'action', 'date_added'], 'search_1')
+            ->addIndex(['lead_id', 'bundle', 'object', 'date_added'], 'search_2')
+            ->addIndex(['lead_id', 'action', 'date_added'], 'search_3');

         $builder->createManyToOne('lead', Lead::class)
             ->addJoinColumn('lead_id', 'id', true, false, 'CASCADE')
diff --git a/app/bundles/LeadBundle/Entity/LeadEventLogRepository.php b/app/bundles/LeadBundle/Entity/LeadEventLogRepository.php
index 9526cd4b..64a2bdf4 100644
--- a/app/bundles/LeadBundle/Entity/LeadEventLogRepository.php
+++ b/app/bundles/LeadBundle/Entity/LeadEventLogRepository.php
@@ -119,7 +119,17 @@ class LeadEventLogRepository extends CommonRepository
             $qb->andWhere($qb->expr()->like($alias.'.properties', $qb->expr()->literal('%'.$options['search'].'%')));
         }

-        return $this->getTimelineResults($qb, $options, $alias.'.action', $alias.'.date_added', [], ['date_added']);
+        $preferred_index = null;
+
+        if ($contact && $bundle && $object && $actions) {
+            $preferred_index = 'search_1';
+        } elseif ($contact && $bundle && $object) {
+            $preferred_index = 'search_2';
+        } elseif ($contact && $actions) {
+            $preferred_index = 'search_3';
+        }
+
+        return $this->getTimelineResults($qb, $options, $alias.'.action', $alias.'.date_added', [], ['date_added'], null, $preferred_index);
     }

     /**
diff --git a/app/bundles/LeadBundle/Entity/TimelineTrait.php b/app/bundles/LeadBundle/Entity/TimelineTrait.php
index eed143c0..b329af7d 100644
--- a/app/bundles/LeadBundle/Entity/TimelineTrait.php
+++ b/app/bundles/LeadBundle/Entity/TimelineTrait.php
@@ -2,6 +2,7 @@

 namespace Mautic\LeadBundle\Entity;

+use Doctrine\DBAL\ForwardCompatibility\Result;
 use Doctrine\DBAL\Query\QueryBuilder;
 use Mautic\CoreBundle\Helper\Chart\ChartQuery;
 use Mautic\CoreBundle\Helper\DateTimeHelper;
@@ -17,6 +18,7 @@ trait TimelineTrait
      * @param array        $serializedColumns     Array of columns to unserialize
      * @param array        $dateTimeColumns       Array of columns to be converted to \DateTime
      * @param null         $resultsParserCallback Callback to custom parse results
+     * @param null         $preferredIndex        Preferred index to be used on the query for performance reasons
      *
      * @return array
      */
@@ -27,7 +29,8 @@ trait TimelineTrait
         $timestampColumn,
         $serializedColumns = [],
         $dateTimeColumns = [],
-        $resultsParserCallback = null
+        $resultsParserCallback = null,
+        $preferredIndex = null
     ) {
         if (!empty($options['unitCounts'])) {
             list($tablePrefix, $column) = explode('.', $timestampColumn);
@@ -38,7 +41,16 @@ trait TimelineTrait
             $cq->modifyTimeDataQuery($query, $column, $tablePrefix);
             $cq->applyDateFilters($query, $column, $tablePrefix);

-            $data = $query->execute()->fetchAll();
+            if ($preferredIndex) {
+                $sql = $query->getSQL();
+                $sql = preg_replace('#(\bFROM\s*\w+\s*\w+)#', '\1 USE INDEX ('.$preferredIndex.')', $sql);
+
+                $data = Result::ensure(
+                    $query->getConnection()->executeQuery($sql, $query->getParameters(), $query->getParameterTypes())
+                )->fetchAll();
+            } else {
+                $data = $query->execute()->fetchAll();
+            }

             return $cq->completeTimeData($data);
         }
@@ -86,7 +98,16 @@ trait TimelineTrait
             }
         }

-        $results = $query->execute()->fetchAll();
+        if ($preferredIndex) {
+            $sql = $query->getSQL();
+            $sql = preg_replace('#(\bFROM\s*\w+\s*\w+)#', '\1 USE INDEX ('.$preferredIndex.')', $sql);
+
+            $results = Result::ensure(
+                $query->getConnection()->executeQuery($sql, $query->getParameters(), $query->getParameterTypes())
+            )->fetchAll();
+        } else {
+            $results = $query->execute()->fetchAll();
+        }

         if (!empty($serializedColumns) || !empty($dateTimeColumns) || is_callable($resultsParserCallback)) {
             // Convert to array or \DateTime since we're using DBAL here
diff --git a/app/bundles/PageBundle/Entity/Hit.php b/app/bundles/PageBundle/Entity/Hit.php
index b551602b..2ebbbbd7 100644
--- a/app/bundles/PageBundle/Entity/Hit.php
+++ b/app/bundles/PageBundle/Entity/Hit.php
@@ -144,7 +144,6 @@ class Hit
         $builder->setTable('page_hits')
             ->setCustomRepositoryClass('Mautic\PageBundle\Entity\HitRepository')
             ->addIndex(['tracking_id'], 'page_hit_tracking_search')
-            ->addIndex(['code'], 'page_hit_code_search')
             ->addIndex(['source', 'source_id'], 'page_hit_source_search')
             ->addIndex(['date_hit', 'date_left'], 'date_hit_left_index')
             ->addIndexWithOptions(['url'], 'page_hit_url', ['lengths' => [0 => 128]]);
diff --git a/app/bundles/PageBundle/EventListener/ReportSubscriber.php b/app/bundles/PageBundle/EventListener/ReportSubscriber.php
index 4b13d41b..c3085dc8 100644
--- a/app/bundles/PageBundle/EventListener/ReportSubscriber.php
+++ b/app/bundles/PageBundle/EventListener/ReportSubscriber.php
@@ -380,12 +380,28 @@ class ReportSubscriber implements EventSubscriberInterface
             case self::CONTEXT_PAGE_HITS:
                 $event->applyDateFilters($qb, 'date_hit', 'ph');

-                $qb->from(MAUTIC_TABLE_PREFIX.'page_hits', 'ph')
-                    ->leftJoin('ph', MAUTIC_TABLE_PREFIX.'pages', 'p', 'ph.page_id = p.id')
-                    ->leftJoin('p', MAUTIC_TABLE_PREFIX.'pages', 'tp', 'p.id = tp.id')
-                    ->leftJoin('p', MAUTIC_TABLE_PREFIX.'pages', 'vp', 'p.id = vp.id')
-                    ->leftJoin('ph', MAUTIC_TABLE_PREFIX.'page_redirects', 'r', 'r.id = ph.redirect_id')
-                    ->leftJoin('ph', MAUTIC_TABLE_PREFIX.'lead_devices', 'ds', 'ds.id = ph.device_id');
+                $qb->from(MAUTIC_TABLE_PREFIX.'page_hits', 'ph');
+
+                if ($event->usesColumnWithPrefix('tp') && $event->usesColumnWithPrefix('vp')) {
+                    $qb->leftJoin('ph', MAUTIC_TABLE_PREFIX.'pages', 'p', 'ph.page_id = p.id')
+                       ->leftJoin('p', MAUTIC_TABLE_PREFIX.'pages', 'tp', 'p.id = tp.id')
+                       ->leftJoin('p', MAUTIC_TABLE_PREFIX.'pages', 'vp', 'p.id = vp.id');
+                } elseif ($event->usesColumnWithPrefix('tp')) {
+                    $qb->leftJoin('ph', MAUTIC_TABLE_PREFIX.'pages', 'p', 'ph.page_id = p.id')
+                       ->leftJoin('p', MAUTIC_TABLE_PREFIX.'pages', 'tp', 'p.id = tp.id');
+                } elseif ($event->usesColumnWithPrefix('vp')) {
+                    $qb->leftJoin('ph', MAUTIC_TABLE_PREFIX.'pages', 'p', 'ph.page_id = p.id')
+                       ->leftJoin('p', MAUTIC_TABLE_PREFIX.'pages', 'vp', 'p.id = vp.id');
+                } elseif ($event->usesColumnWithPrefix('p')) {
+                    $qb->leftJoin('ph', MAUTIC_TABLE_PREFIX.'pages', 'p', 'ph.page_id = p.id');
+                }
+
+                if ($event->usesColumnWithPrefix('r')) {
+                    $qb->leftJoin('ph', MAUTIC_TABLE_PREFIX.'page_redirects', 'r', 'r.id = ph.redirect_id');
+                }
+                if ($event->usesColumnWithPrefix('ds')) {
+                    $qb->leftJoin('ph', MAUTIC_TABLE_PREFIX.'lead_devices', 'ds', 'ds.id = ph.device_id');
+                }

                 $event->addIpAddressLeftJoin($qb, 'ph');
                 $event->addCategoryLeftJoin($qb, 'p');
@@ -447,7 +463,9 @@ class ReportSubscriber implements EventSubscriberInterface

                 case 'mautic.page.graph.line.time.on.site':
                     $chart = new LineChart(null, $options['dateFrom'], $options['dateTo']);
-                    $queryBuilder->select('TIMESTAMPDIFF(SECOND, ph.date_hit, ph.date_left) as data, ph.date_hit as date');
+                    $queryBuilder->select('generated_date_diff, ph.date_hit as date');
+                    $queryBuilder->resetQueryPart('join');
+                    $queryBuilder->leftJoin('ph', MAUTIC_TABLE_PREFIX.'pages', 'p', 'ph.page_id = p.id');
                     $queryBuilder->andWhere($qb->expr()->isNotNull('ph.date_left'));

                     $hits = $chartQuery->loadAndBuildTimeData($queryBuilder);
@@ -464,6 +482,7 @@ class ReportSubscriber implements EventSubscriberInterface

                     foreach ($timesOnSite as $time) {
                         $q = clone $queryBuilder;
+                        $q->resetQueryPart('join');
                         $chartQuery->modifyCountDateDiffQuery($q, 'date_hit', 'date_left', $time['from'], $time['till'], 'ph');
                         $data = $chartQuery->fetchCountDateDiff($q);
                         $chart->setDataset($time['label'], $data);
@@ -523,6 +542,7 @@ class ReportSubscriber implements EventSubscriberInterface
                     break;
                 case 'mautic.page.graph.pie.devices':
                     $queryBuilder->select('ds.device, COUNT(distinct(ph.id)) as the_count')
+                        ->leftJoin('ph', MAUTIC_TABLE_PREFIX.'lead_devices', 'ds', 'ds.id = ph.device_id')
                         ->groupBy('ds.device');
                     $data  = $queryBuilder->execute()->fetchAll();
                     $chart = new PieChart();
diff --git a/app/migrations/Version20220923162701.php b/app/migrations/Version20220923162701.php
new file mode 100644
index 00000000..abd5a5f2
--- /dev/null
+++ b/app/migrations/Version20220923162701.php
@@ -0,0 +1,31 @@
+<?php
+
+declare(strict_types=1);
+
+namespace Mautic\Migrations;
+
+use Doctrine\DBAL\Schema\Schema;
+use Doctrine\Migrations\Exception\SkipMigration;
+use Mautic\CoreBundle\Doctrine\AbstractMauticMigration;
+
+final class Version20220923162701 extends AbstractMauticMigration
+{
+
+    /**
+     * @throws SkipMigration
+     * @throws \Doctrine\DBAL\Schema\SchemaException
+     */
+    public function preUp(Schema $schema): void
+    {
+        if ($schema->getTable("{$this->prefix}lead_event_log")->hasIndex("{$this->prefix}search_1")) {
+            throw new SkipMigration('Schema includes this migration');
+        }
+    }
+
+    public function up(Schema $schema): void
+    {
+        $this->addSql(
+            "CREATE INDEX {$this->prefix}search_1 ON {$this->prefix}lead_event_log (lead_id, bundle, object, action, date_added)"
+        );
+    }
+}
diff --git a/app/migrations/Version20220923162702.php b/app/migrations/Version20220923162702.php
new file mode 100644
index 00000000..643b2da2
--- /dev/null
+++ b/app/migrations/Version20220923162702.php
@@ -0,0 +1,31 @@
+<?php
+
+declare(strict_types=1);
+
+namespace Mautic\Migrations;
+
+use Doctrine\DBAL\Schema\Schema;
+use Doctrine\Migrations\Exception\SkipMigration;
+use Mautic\CoreBundle\Doctrine\AbstractMauticMigration;
+
+final class Version20220923162702 extends AbstractMauticMigration
+{
+
+    /**
+     * @throws SkipMigration
+     * @throws \Doctrine\DBAL\Schema\SchemaException
+     */
+    public function preUp(Schema $schema): void
+    {
+        if ($schema->getTable("{$this->prefix}lead_event_log")->hasIndex("{$this->prefix}search_2")) {
+            throw new SkipMigration('Schema includes this migration');
+        }
+    }
+
+    public function up(Schema $schema): void
+    {
+        $this->addSql(
+            "CREATE INDEX {$this->prefix}search_2 ON {$this->prefix}lead_event_log (lead_id, bundle, object, date_added)"
+        );
+    }
+}
diff --git a/app/migrations/Version20220923162703.php b/app/migrations/Version20220923162703.php
new file mode 100644
index 00000000..5ac72f7e
--- /dev/null
+++ b/app/migrations/Version20220923162703.php
@@ -0,0 +1,29 @@
+<?php
+
+declare(strict_types=1);
+
+namespace Mautic\Migrations;
+
+use Doctrine\DBAL\Schema\Schema;
+use Doctrine\Migrations\Exception\SkipMigration;
+use Mautic\CoreBundle\Doctrine\AbstractMauticMigration;
+
+final class Version20220923162703 extends AbstractMauticMigration
+{
+
+  /**
+   * @throws SkipMigration
+   * @throws \Doctrine\DBAL\Schema\SchemaException
+   */
+  public function preUp(Schema $schema): void
+  {
+    if ($schema->getTable("{$this->prefix}lead_event_log")->hasIndex("{$this->prefix}search_3")) {
+      throw new SkipMigration('Schema includes this migration');
+    }
+  }
+
+  public function up(Schema $schema): void
+  {
+    $this->addSql("CREATE INDEX {$this->prefix}search_3 ON {$this->prefix}lead_event_log (lead_id, action, date_added)");
+  }
+}
diff --git a/app/migrations/Version20220923162704.php b/app/migrations/Version20220923162704.php
new file mode 100644
index 00000000..1015fcf6
--- /dev/null
+++ b/app/migrations/Version20220923162704.php
@@ -0,0 +1,29 @@
+<?php
+
+declare(strict_types=1);
+
+namespace Mautic\Migrations;
+
+use Doctrine\DBAL\Schema\Schema;
+use Doctrine\Migrations\Exception\SkipMigration;
+use Mautic\CoreBundle\Doctrine\AbstractMauticMigration;
+
+final class Version20220923162704 extends AbstractMauticMigration
+{
+
+    /**
+     * @throws SkipMigration
+     * @throws \Doctrine\DBAL\Schema\SchemaException
+     */
+    public function preUp(Schema $schema): void
+    {
+        if (!$schema->getTable("{$this->prefix}page_hits")->hasIndex("{$this->prefix}code")) {
+            throw new SkipMigration('Schema includes this migration');
+        }
+    }
+
+    public function up(Schema $schema): void
+    {
+        $this->addSql('DROP INDEX '.$this->prefix.'code ON '.$this->prefix.'page_hits');
+    }
+}
diff --git a/app/migrations/Version20220923162705.php b/app/migrations/Version20220923162705.php
new file mode 100644
index 00000000..8757c3e6
--- /dev/null
+++ b/app/migrations/Version20220923162705.php
@@ -0,0 +1,31 @@
+<?php
+
+declare(strict_types=1);
+
+namespace Mautic\Migrations;
+
+use Doctrine\DBAL\Schema\Schema;
+use Doctrine\Migrations\Exception\SkipMigration;
+use Mautic\CoreBundle\Doctrine\AbstractMauticMigration;
+
+final class Version20220923162705 extends AbstractMauticMigration
+{
+
+    /**
+     * @throws SkipMigration
+     * @throws \Doctrine\DBAL\Schema\SchemaException
+     */
+    public function preUp(Schema $schema): void
+    {
+        if ($schema->getTable("{$this->prefix}page_hits")->hasColumn("{$this->prefix}generated_date_diff")) {
+            throw new SkipMigration('Schema includes this migration');
+        }
+    }
+
+    public function up(Schema $schema): void
+    {
+        $this->addSql(
+            "ALTER TABLE {$this->prefix}page_hits ADD COLUMN {$this->prefix}generated_date_diff INT(11) GENERATED ALWAYS AS (timestampdiff(SECOND,`date_hit`,`date_left`)) STORED"
+        );
+    }
+}
diff --git a/app/migrations/Version20220923162706.php b/app/migrations/Version20220923162706.php
new file mode 100644
index 00000000..4312cd0e
--- /dev/null
+++ b/app/migrations/Version20220923162706.php
@@ -0,0 +1,31 @@
+<?php
+
+declare(strict_types=1);
+
+namespace Mautic\Migrations;
+
+use Doctrine\DBAL\Schema\Schema;
+use Doctrine\Migrations\Exception\SkipMigration;
+use Mautic\CoreBundle\Doctrine\AbstractMauticMigration;
+
+final class Version20220923162706 extends AbstractMauticMigration
+{
+
+    /**
+     * @throws SkipMigration
+     * @throws \Doctrine\DBAL\Schema\SchemaException
+     */
+    public function preUp(Schema $schema): void
+    {
+        if ($schema->getTable("{$this->prefix}campaign_lead_event_log")->hasIndex("{$this->prefix}search_1")) {
+            throw new SkipMigration('Schema includes this migration');
+        }
+    }
+
+    public function up(Schema $schema): void
+    {
+        $this->addSql(
+            "CREATE INDEX {$this->prefix}search_1 ON {$this->prefix}campaign_lead_event_log (lead_id, is_scheduled, date_triggered)"
+        );
+    }
+}
